/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, ImageUpload as PrismaImageUpload } from "@prisma/client";

export class ImageUploadServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.ImageUploadCountArgs, "select">
  ): Promise<number> {
    return this.prisma.imageUpload.count(args);
  }

  async imageUploads<T extends Prisma.ImageUploadFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageUploadFindManyArgs>
  ): Promise<PrismaImageUpload[]> {
    return this.prisma.imageUpload.findMany<Prisma.ImageUploadFindManyArgs>(
      args
    );
  }
  async imageUpload<T extends Prisma.ImageUploadFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageUploadFindUniqueArgs>
  ): Promise<PrismaImageUpload | null> {
    return this.prisma.imageUpload.findUnique(args);
  }
  async createImageUpload<T extends Prisma.ImageUploadCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageUploadCreateArgs>
  ): Promise<PrismaImageUpload> {
    return this.prisma.imageUpload.create<T>(args);
  }
  async updateImageUpload<T extends Prisma.ImageUploadUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageUploadUpdateArgs>
  ): Promise<PrismaImageUpload> {
    return this.prisma.imageUpload.update<T>(args);
  }
  async deleteImageUpload<T extends Prisma.ImageUploadDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.ImageUploadDeleteArgs>
  ): Promise<PrismaImageUpload> {
    return this.prisma.imageUpload.delete(args);
  }
}
